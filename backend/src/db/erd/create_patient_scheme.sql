-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;

DROP TABLE IF EXISTS public.patient_diagnosis;
DROP TABLE IF EXISTS public.patient_medications;
DROP TABLE IF EXISTS public.patient_appointments;
DROP TABLE IF EXISTS public.patient_biomarkers;
DROP TABLE IF EXISTS public.practice_patients;

DROP SEQUENCE IF EXISTS patient_appointments_id_seq;
CREATE SEQUENCE patient_appointments_id_seq
    START 10000
    INCREMENT 1;
	
DROP SEQUENCE IF EXISTS practice_patients_id_seq;
CREATE SEQUENCE practice_patients_id_seq
    START 10000
    INCREMENT 1;
	
DROP SEQUENCE IF EXISTS patient_diagnosis_id_seq;
CREATE SEQUENCE patient_diagnosis_id_seq
    START 10000
    INCREMENT 1;
	
DROP SEQUENCE IF EXISTS patient_medications_id_seq;
CREATE SEQUENCE patient_medications_id_seq
    START 10000
    INCREMENT 1;

CREATE TABLE public.patient_appointments
(
    id integer NOT NULL DEFAULT nextval('patient_appointments_id_seq'::regclass),
    practice_id integer NOT NULL,
    practice_patient_id integer NOT NULL,
    practitioner_id integer,
    office_id integer,
    scheduled_time timestamp with time zone,
    ehr_id integer,
    ehr_patient_id integer,
    ehr_supervising_practitioner_id integer,
    ehr_billing_practitioner_id integer,
    appt_is_break boolean,
    ehr_practitioner_id integer,
    ehr_office_id integer,
    supervising_practitioner_id integer,
    billing_practitioner_id integer,
    status citext COLLATE pg_catalog."default",
    deleted_flag boolean,
    reason text COLLATE pg_catalog."default",
    update_date timestamp with time zone,
    create_date timestamp with time zone,
    icd10_codes character varying[] COLLATE pg_catalog."default",
    is_telehealth boolean,
    exam_room integer,
    duration integer,
    payment_profile citext COLLATE pg_catalog."default",
    primary_insurer_name citext COLLATE pg_catalog."default",
    primary_insurer_id citext COLLATE pg_catalog."default",
    first_billed_date timestamp with time zone,
    billing_status citext COLLATE pg_catalog."default",
    year integer,
    month integer,
    day integer,
    day_of_week integer,
    quarter integer,
    hour integer,
	minute integer,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT patient_appointments_pkey PRIMARY KEY (id),
    CONSTRAINT patient_appointments_scheduled_time_patient_id_practice_id_key UNIQUE (scheduled_time, practice_patient_id, practice_id)
);

CREATE TABLE public.practice_patients
(
    id integer NOT NULL DEFAULT nextval('practice_patients_id_seq'::regclass),
    practice_id integer NOT NULL,
    user_id integer,
    last_name citext COLLATE pg_catalog."default" NOT NULL,
    first_name citext COLLATE pg_catalog."default" NOT NULL,
    birthdate date NOT NULL,
    gender_birth character(1) COLLATE pg_catalog."default",
    gender_identity citext COLLATE pg_catalog."default",
    race citext COLLATE pg_catalog."default",
    ethnicity citext COLLATE pg_catalog."default",
    email citext COLLATE pg_catalog."default",
    cell_phone character varying(12) COLLATE pg_catalog."default",
    postal_code character varying(12) COLLATE pg_catalog."default",
    city character varying(85) COLLATE pg_catalog."default",
    county character varying(85) COLLATE pg_catalog."default",
    state character varying(85) COLLATE pg_catalog."default",
    state_code character(2) COLLATE pg_catalog."default",
    country_code character(2) COLLATE pg_catalog."default" DEFAULT 'US'::bpchar,
    date_first_appointment timestamp with time zone,
    ehr_id integer,
    chart_id citext,
    status citext NOT NULL DEFAULT 'Active',
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT patients_pkey PRIMARY KEY (id),
	CONSTRAINT check_status CHECK (status::text = ANY (ARRAY['Active'::character varying::text, 'Inactive'::character varying::text])) NOT VALID,
	UNIQUE (practice_id, last_name, first_name, birthdate, email)
);

CREATE TABLE public.patient_medications
(
    id integer NOT NULL DEFAULT nextval('patient_medications_id_seq'::regclass),
    practice_id integer NOT NULL,
    practice_patient_id integer NOT NULL,
    practitioner_id integer,
    ehr_vendor_id integer,
    ehr_id integer,
    ehr_practitioner_id integer,
    ehr_patient_id integer,
    ehr_appointment_id integer,
    date_prescribed date,
    date_started_taking date,
    date_stopped_taking date,
    notes text COLLATE pg_catalog."default",
    order_status citext COLLATE pg_catalog."default",
    number_refills integer,
    dispense_quantity integer,
    dosage_quantity integer,
    dosage_units citext COLLATE pg_catalog."default",
    rxnorm citext COLLATE pg_catalog."default",
    route citext COLLATE pg_catalog."default",
    frequency citext COLLATE pg_catalog."default",
    prn boolean,
    indication citext COLLATE pg_catalog."default",
    signature_note citext COLLATE pg_catalog."default",
    pharmacy_note citext COLLATE pg_catalog."default",
    name citext COLLATE pg_catalog."default" NOT NULL,
    status citext COLLATE pg_catalog."default",
    daw boolean,
    ndc citext COLLATE pg_catalog."default",
    year integer,
    month integer,
    day integer,
    day_of_week integer,
    quarter integer,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT patient_medications_pkey PRIMARY KEY (id)
);

CREATE TABLE public.patient_diagnosis
(
    id integer NOT NULL DEFAULT nextval('patient_diagnosis_id_seq'::regclass),
    practice_id integer NOT NULL,
    practice_patient_id integer NOT NULL,
    practitioner_id integer NOT NULL,
    office_id integer NOT NULL,
    patient_appointment_id integer NOT NULL,
    diagnosis_code_id integer NOT NULL,
    code_order integer NOT NULL,
    year integer,
    month integer,
    day integer,
    day_of_week integer,
    quarter integer,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT patient_diagnosis_pkey PRIMARY KEY (id),
    CONSTRAINT patient_diagnosis_patient_appointment_id_diagnosis_code_id_key UNIQUE (patient_appointment_id, diagnosis_code_id)
);

CREATE TABLE public.patient_biomarkers
(
    practice_patient_id integer NOT NULL,
    biomarker_id integer NOT NULL,
    value citext COLLATE pg_catalog."en_US.utf8" NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT patient_biomarkers_pkey PRIMARY KEY (practice_patient_id, biomarker_id, value),
    CONSTRAINT patient_biomarkers_value UNIQUE (value)
);

ALTER TABLE IF EXISTS public.patient_appointments
    ADD CONSTRAINT patient_appointments_patient_id_fkey FOREIGN KEY (practice_patient_id)
    REFERENCES public.practice_patients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_appointments
    ADD FOREIGN KEY (practice_id)
    REFERENCES public.practices (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_appointments
    ADD FOREIGN KEY (practitioner_id)
    REFERENCES public.practitioners (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_appointments
    ADD FOREIGN KEY (office_id)
    REFERENCES public.offices (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.practice_patients
    ADD FOREIGN KEY (postal_code)
    REFERENCES public.postal_codes (postal_code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.practice_patients
    ADD FOREIGN KEY (practice_id)
    REFERENCES public.practices (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_medications
    ADD CONSTRAINT patient_medications_patient_id_fkey FOREIGN KEY (practice_patient_id)
    REFERENCES public.practice_patients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_medications
    ADD FOREIGN KEY (practice_id)
    REFERENCES public.practices (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_medications
    ADD FOREIGN KEY (practitioner_id)
    REFERENCES public.practitioners (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_diagnosis
    ADD CONSTRAINT patient_diagnosis_patient_id_fkey FOREIGN KEY (practice_patient_id)
    REFERENCES public.practice_patients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_diagnosis
    ADD FOREIGN KEY (practice_id)
    REFERENCES public.practices (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_diagnosis
    ADD FOREIGN KEY (practitioner_id)
    REFERENCES public.practitioners (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_diagnosis
    ADD FOREIGN KEY (patient_appointment_id)
    REFERENCES public.patient_appointments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_diagnosis
    ADD FOREIGN KEY (office_id)
    REFERENCES public.offices (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_diagnosis
    ADD FOREIGN KEY (diagnosis_code_id)
    REFERENCES public.diagnosis_codes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_biomarkers
    ADD CONSTRAINT patient_biomarkers_patient_id FOREIGN KEY (practice_patient_id)
    REFERENCES public.practice_patients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_biomarkers
    ADD FOREIGN KEY (biomarker_id)
    REFERENCES public.biomarkers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
	
--- TRIGGERS

CREATE OR REPLACE TRIGGER patient_appointment_created_at_trigger
    BEFORE INSERT
    ON public.patient_appointments
    FOR EACH ROW
    EXECUTE FUNCTION public.set_created_at();

CREATE OR REPLACE TRIGGER patient_appointment_updated_at_trigger
    BEFORE INSERT OR UPDATE 
    ON public.patient_appointments
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();

CREATE OR REPLACE TRIGGER patient_biomarkers_updated_at_trigger
    BEFORE INSERT OR UPDATE 
    ON public.patient_biomarkers
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();

CREATE OR REPLACE TRIGGER patients_biomarkers_created_at_trigger
    BEFORE INSERT
    ON public.patient_biomarkers
    FOR EACH ROW
    EXECUTE FUNCTION public.set_created_at();
	
CREATE OR REPLACE TRIGGER patient_diagnosis_created_at_trigger
    BEFORE INSERT
    ON public.patient_diagnosis
    FOR EACH ROW
    EXECUTE FUNCTION public.set_created_at();

CREATE OR REPLACE TRIGGER patient_diagnosis_updated_at_trigger
    BEFORE INSERT OR UPDATE 
    ON public.patient_diagnosis
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();
	
CREATE OR REPLACE TRIGGER patient_medications_created_at_trigger
    BEFORE INSERT
    ON public.patient_medications
    FOR EACH ROW
    EXECUTE FUNCTION public.set_created_at();

CREATE OR REPLACE TRIGGER patient_medications_updated_at_trigger
    BEFORE INSERT OR UPDATE 
    ON public.patient_medications
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();
	
CREATE OR REPLACE TRIGGER practice_patients_created_at_trigger
    BEFORE INSERT
    ON public.practice_patients
    FOR EACH ROW
    EXECUTE FUNCTION public.set_created_at();

CREATE OR REPLACE TRIGGER practice_patients_updated_at_trigger
    BEFORE INSERT OR UPDATE 
    ON public.practice_patients
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();

END;