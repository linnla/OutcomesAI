AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Stage:
    Type: String
    Description: dev, staging, or prod
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    ConstraintDescription: Must be one of dev, staging, prod

  ResourceNamePrefix:
    Type: String
    Description: Prefix for naming resources
    Default: outcomesai
    AllowedPattern: ^[a-zA-Z0-9\-]*$
    ConstraintDescription: Must be alphanumeric and may contain hyphens

  Subnet1Name:
    Type: String
    Description: Name of RDS Subnet 1
    Default: rds_1
    AllowedValues:
      - rds_1
      - rds_2
      - other_value
    ConstraintDescription: Must be 'rds_1', 'rds_2', or 'other_value'

  Subnet2Name:
    Type: String
    Description: Name of RDS Subnet 2
    Default: rds_2
    AllowedValues:
      - rds_1
      - rds_2
      - other_value
    ConstraintDescription: Must be 'rds_1', 'rds_2', or 'other_value'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${Stage}-VPC'

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${Stage}-subnet-1'

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${Stage}-subnet-2'

  Subnet1RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${Stage}-subnet-1-rt'

  Subnet2RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}-${Stage}-subnet-2-rt'

  Subnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref Subnet1RouteTable
      SubnetId: !Ref Subnet1

  Subnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref Subnet2RouteTable
      SubnetId: !Ref Subnet2

  Subnet1DefaultRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref Subnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPC

  Subnet2DefaultRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref Subnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPC

  APIGatewayVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.execute-api'
      VpcId: !Ref VPC

  VPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for VPC for RDS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}_${AWS::StackName}_${Stage}'

  NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}_${AWS::StackName}_${Stage}'

  NACLInboundRuleSubnet1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACL
      RuleNumber: 100
      Protocol: TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 10.0.1.0/24
      PortRange:
        From: 443 # Assuming HTTPS (TLS) is used for the API Gateway
        To: 443
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}_${AWS::StackName}_${Stage}'

  NACLInboundRuleSubnet2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACL
      RuleNumber: 101
      Protocol: TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 10.0.2.0/24
      PortRange:
        From: 443 # Assuming HTTPS (TLS) is used for the API Gateway
        To: 443
      Tags:
        - Key: Name
          Value: !Sub '${ResourceNamePrefix}_${AWS::StackName}_${Stage}'

  Subnet1AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet1
      NetworkAclId: !Ref NACL

  Subnet2AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet2
      NetworkAclId: !Ref NACL

Outputs:
  VPCId:
    Value: !Ref VPC
    Description: ID of the VPC
  Subnet1Id:
    Value: !Ref Subnet1
    Description: ID of RDS Subnet 1
  Subnet2Id:
    Value: !Ref Subnet2
    Description: ID of RDS Subnet 2
  VPCEndpoint:
    Value: !Ref APIGatewayVpcEndpoint
    Description: VPC endpoint for API Gateway
  SecurityGroupId:
    Value: !Ref VPCSecurityGroup
    Description: ID of RDS VPC Security Group
  SecurityGroupName:
    Value: !Sub '${ResourceNamePrefix}_${AWS::StackName}_${Stage}'
    Description: Name of RDS VPC Security Group
  NetworkAclId:
    Value: !Ref NACL
    Description: ID of RDS Network ACL
